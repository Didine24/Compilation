Terminals unused in grammar

   Def
   Dep
   Mp
   T_com
   Ind
   Afc
   St
   Jp
   Jz
   T_err
   T_bot


Grammar

    0 $accept: MP $end

    1 MP: L_vart C

    2 E: E Pl T
    3  | E Mo T
    4  | E Or T
    5  | E Lt T
    6  | E Eq T
    7  | T

    8 T: T Mu F
    9  | T And F
   10  | Not F
   11  | F

   12 F: '(' E ')'
   13  | I
   14  | V
   15  | true
   16  | false
   17  | NewAr TP '[' E ']'
   18  | Et

   19 Et: V '[' E ']'
   20   | Et '[' E ']'

   21 C: C Se Ca
   22  | Ca

   23 Ca: Et Af E
   24   | V Af E
   25   | Sk
   26   | '{' C '}'
   27   | If E Th C El Ca
   28   | Wh E Do Ca

   29 Argt: V ':' TP

   30 TP: T_boo
   31   | T_int
   32   | T_ar TP

   33 L_vart: %empty
   34       | L_vartnn

   35 L_vartnn: Var Argt
   36         | L_vartnn ',' Var Argt


Terminals, with rules where they appear

$end (0) 0
'(' (40) 12
')' (41) 12
',' (44) 36
':' (58) 29
'[' (91) 17 19 20
']' (93) 17 19 20
'{' (123) 26
'}' (125) 26
error (256)
I (258) 13
V (259) 14 19 24 29
Def (260)
Dep (261)
Mp (262)
Af (263) 23 24
Sk (264) 25
NewAr (265) 17
T_ar (266) 32
T_com (267)
true (268) 15
false (269) 16
Se (270) 21
Ind (271)
If (272) 27
Th (273) 27
El (274) 27
Var (275) 35 36
Wh (276) 28
Do (277) 28
Pl (278) 2
Mo (279) 3
Mu (280) 8
And (281) 9
Or (282) 4
Not (283) 10
Lt (284) 5
Eq (285) 6
Afc (286)
St (287)
Jp (288)
Jz (289)
T_int (290) 31
T_boo (291) 30
T_err (292)
T_bot (293)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
MP (48)
    on left: 1, on right: 0
E (49)
    on left: 2 3 4 5 6 7, on right: 2 3 4 5 6 12 17 19 20 23 24 27
    28
T (50)
    on left: 8 9 10 11, on right: 2 3 4 5 6 7 8 9
F (51)
    on left: 12 13 14 15 16 17 18, on right: 8 9 10 11
Et (52)
    on left: 19 20, on right: 18 20 23
C (53)
    on left: 21 22, on right: 1 21 26 27
Ca (54)
    on left: 23 24 25 26 27 28, on right: 21 22 27 28
Argt (55)
    on left: 29, on right: 35 36
TP (56)
    on left: 30 31 32, on right: 17 29 32
L_vart (57)
    on left: 33 34, on right: 1
L_vartnn (58)
    on left: 35 36, on right: 34 36


State 0

    0 $accept: . MP $end
    1 MP: . L_vart C
   33 L_vart: . %empty  [V, Sk, If, Wh, '{']
   34       | . L_vartnn
   35 L_vartnn: . Var Argt
   36         | . L_vartnn ',' Var Argt

    Var  shift, and go to state 1

    $default  reduce using rule 33 (L_vart)

    MP        go to state 2
    L_vart    go to state 3
    L_vartnn  go to state 4


State 1

   29 Argt: . V ':' TP
   35 L_vartnn: Var . Argt

    V  shift, and go to state 5

    Argt  go to state 6


State 2

    0 $accept: MP . $end

    $end  shift, and go to state 7


State 3

    1 MP: L_vart . C
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'
   21 C: . C Se Ca
   22  | . Ca
   23 Ca: . Et Af E
   24   | . V Af E
   25   | . Sk
   26   | . '{' C '}'
   27   | . If E Th C El Ca
   28   | . Wh E Do Ca

    V    shift, and go to state 8
    Sk   shift, and go to state 9
    If   shift, and go to state 10
    Wh   shift, and go to state 11
    '{'  shift, and go to state 12

    Et  go to state 13
    C   go to state 14
    Ca  go to state 15


State 4

   34 L_vart: L_vartnn .  [V, Sk, If, Wh, '{']
   36 L_vartnn: L_vartnn . ',' Var Argt

    ','  shift, and go to state 16

    $default  reduce using rule 34 (L_vart)


State 5

   29 Argt: V . ':' TP

    ':'  shift, and go to state 17


State 6

   35 L_vartnn: Var Argt .

    $default  reduce using rule 35 (L_vartnn)


State 7

    0 $accept: MP $end .

    $default  accept


State 8

   19 Et: V . '[' E ']'
   24 Ca: V . Af E

    Af   shift, and go to state 18
    '['  shift, and go to state 19


State 9

   25 Ca: Sk .

    $default  reduce using rule 25 (Ca)


State 10

    2 E: . E Pl T
    3  | . E Mo T
    4  | . E Or T
    5  | . E Lt T
    6  | . E Eq T
    7  | . T
    8 T: . T Mu F
    9  | . T And F
   10  | . Not F
   11  | . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'
   27 Ca: If . E Th C El Ca

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    Not    shift, and go to state 25
    '('    shift, and go to state 26

    E   go to state 27
    T   go to state 28
    F   go to state 29
    Et  go to state 30


State 11

    2 E: . E Pl T
    3  | . E Mo T
    4  | . E Or T
    5  | . E Lt T
    6  | . E Eq T
    7  | . T
    8 T: . T Mu F
    9  | . T And F
   10  | . Not F
   11  | . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'
   28 Ca: Wh . E Do Ca

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    Not    shift, and go to state 25
    '('    shift, and go to state 26

    E   go to state 31
    T   go to state 28
    F   go to state 29
    Et  go to state 30


State 12

   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'
   21 C: . C Se Ca
   22  | . Ca
   23 Ca: . Et Af E
   24   | . V Af E
   25   | . Sk
   26   | . '{' C '}'
   26   | '{' . C '}'
   27   | . If E Th C El Ca
   28   | . Wh E Do Ca

    V    shift, and go to state 8
    Sk   shift, and go to state 9
    If   shift, and go to state 10
    Wh   shift, and go to state 11
    '{'  shift, and go to state 12

    Et  go to state 13
    C   go to state 32
    Ca  go to state 15


State 13

   20 Et: Et . '[' E ']'
   23 Ca: Et . Af E

    Af   shift, and go to state 33
    '['  shift, and go to state 34


State 14

    1 MP: L_vart C .  [$end]
   21 C: C . Se Ca

    Se  shift, and go to state 35

    $default  reduce using rule 1 (MP)


State 15

   22 C: Ca .

    $default  reduce using rule 22 (C)


State 16

   36 L_vartnn: L_vartnn ',' . Var Argt

    Var  shift, and go to state 36


State 17

   29 Argt: V ':' . TP
   30 TP: . T_boo
   31   | . T_int
   32   | . T_ar TP

    T_ar   shift, and go to state 37
    T_int  shift, and go to state 38
    T_boo  shift, and go to state 39

    TP  go to state 40


State 18

    2 E: . E Pl T
    3  | . E Mo T
    4  | . E Or T
    5  | . E Lt T
    6  | . E Eq T
    7  | . T
    8 T: . T Mu F
    9  | . T And F
   10  | . Not F
   11  | . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'
   24 Ca: V Af . E

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    Not    shift, and go to state 25
    '('    shift, and go to state 26

    E   go to state 41
    T   go to state 28
    F   go to state 29
    Et  go to state 30


State 19

    2 E: . E Pl T
    3  | . E Mo T
    4  | . E Or T
    5  | . E Lt T
    6  | . E Eq T
    7  | . T
    8 T: . T Mu F
    9  | . T And F
   10  | . Not F
   11  | . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   19   | V '[' . E ']'
   20   | . Et '[' E ']'

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    Not    shift, and go to state 25
    '('    shift, and go to state 26

    E   go to state 42
    T   go to state 28
    F   go to state 29
    Et  go to state 30


State 20

   13 F: I .

    $default  reduce using rule 13 (F)


State 21

   14 F: V .  [$end, Se, Th, El, Do, Pl, Mo, Mu, And, Or, Lt, Eq, ')', ']', '}']
   19 Et: V . '[' E ']'

    '['  shift, and go to state 19

    $default  reduce using rule 14 (F)


State 22

   17 F: NewAr . TP '[' E ']'
   30 TP: . T_boo
   31   | . T_int
   32   | . T_ar TP

    T_ar   shift, and go to state 37
    T_int  shift, and go to state 38
    T_boo  shift, and go to state 39

    TP  go to state 43


State 23

   15 F: true .

    $default  reduce using rule 15 (F)


State 24

   16 F: false .

    $default  reduce using rule 16 (F)


State 25

   10 T: Not . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    '('    shift, and go to state 26

    F   go to state 44
    Et  go to state 30


State 26

    2 E: . E Pl T
    3  | . E Mo T
    4  | . E Or T
    5  | . E Lt T
    6  | . E Eq T
    7  | . T
    8 T: . T Mu F
    9  | . T And F
   10  | . Not F
   11  | . F
   12 F: . '(' E ')'
   12  | '(' . E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    Not    shift, and go to state 25
    '('    shift, and go to state 26

    E   go to state 45
    T   go to state 28
    F   go to state 29
    Et  go to state 30


State 27

    2 E: E . Pl T
    3  | E . Mo T
    4  | E . Or T
    5  | E . Lt T
    6  | E . Eq T
   27 Ca: If E . Th C El Ca

    Th  shift, and go to state 46
    Pl  shift, and go to state 47
    Mo  shift, and go to state 48
    Or  shift, and go to state 49
    Lt  shift, and go to state 50
    Eq  shift, and go to state 51


State 28

    7 E: T .  [$end, Se, Th, El, Do, Pl, Mo, Or, Lt, Eq, ')', ']', '}']
    8 T: T . Mu F
    9  | T . And F

    Mu   shift, and go to state 52
    And  shift, and go to state 53

    $default  reduce using rule 7 (E)


State 29

   11 T: F .

    $default  reduce using rule 11 (T)


State 30

   18 F: Et .  [$end, Se, Th, El, Do, Pl, Mo, Mu, And, Or, Lt, Eq, ')', ']', '}']
   20 Et: Et . '[' E ']'

    '['  shift, and go to state 34

    $default  reduce using rule 18 (F)


State 31

    2 E: E . Pl T
    3  | E . Mo T
    4  | E . Or T
    5  | E . Lt T
    6  | E . Eq T
   28 Ca: Wh E . Do Ca

    Do  shift, and go to state 54
    Pl  shift, and go to state 47
    Mo  shift, and go to state 48
    Or  shift, and go to state 49
    Lt  shift, and go to state 50
    Eq  shift, and go to state 51


State 32

   21 C: C . Se Ca
   26 Ca: '{' C . '}'

    Se   shift, and go to state 35
    '}'  shift, and go to state 55


State 33

    2 E: . E Pl T
    3  | . E Mo T
    4  | . E Or T
    5  | . E Lt T
    6  | . E Eq T
    7  | . T
    8 T: . T Mu F
    9  | . T And F
   10  | . Not F
   11  | . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'
   23 Ca: Et Af . E

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    Not    shift, and go to state 25
    '('    shift, and go to state 26

    E   go to state 56
    T   go to state 28
    F   go to state 29
    Et  go to state 30


State 34

    2 E: . E Pl T
    3  | . E Mo T
    4  | . E Or T
    5  | . E Lt T
    6  | . E Eq T
    7  | . T
    8 T: . T Mu F
    9  | . T And F
   10  | . Not F
   11  | . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'
   20   | Et '[' . E ']'

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    Not    shift, and go to state 25
    '('    shift, and go to state 26

    E   go to state 57
    T   go to state 28
    F   go to state 29
    Et  go to state 30


State 35

   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'
   21 C: C Se . Ca
   23 Ca: . Et Af E
   24   | . V Af E
   25   | . Sk
   26   | . '{' C '}'
   27   | . If E Th C El Ca
   28   | . Wh E Do Ca

    V    shift, and go to state 8
    Sk   shift, and go to state 9
    If   shift, and go to state 10
    Wh   shift, and go to state 11
    '{'  shift, and go to state 12

    Et  go to state 13
    Ca  go to state 58


State 36

   29 Argt: . V ':' TP
   36 L_vartnn: L_vartnn ',' Var . Argt

    V  shift, and go to state 5

    Argt  go to state 59


State 37

   30 TP: . T_boo
   31   | . T_int
   32   | . T_ar TP
   32   | T_ar . TP

    T_ar   shift, and go to state 37
    T_int  shift, and go to state 38
    T_boo  shift, and go to state 39

    TP  go to state 60


State 38

   31 TP: T_int .

    $default  reduce using rule 31 (TP)


State 39

   30 TP: T_boo .

    $default  reduce using rule 30 (TP)


State 40

   29 Argt: V ':' TP .

    $default  reduce using rule 29 (Argt)


State 41

    2 E: E . Pl T
    3  | E . Mo T
    4  | E . Or T
    5  | E . Lt T
    6  | E . Eq T
   24 Ca: V Af E .  [$end, Se, El, '}']

    Pl  shift, and go to state 47
    Mo  shift, and go to state 48
    Or  shift, and go to state 49
    Lt  shift, and go to state 50
    Eq  shift, and go to state 51

    $default  reduce using rule 24 (Ca)


State 42

    2 E: E . Pl T
    3  | E . Mo T
    4  | E . Or T
    5  | E . Lt T
    6  | E . Eq T
   19 Et: V '[' E . ']'

    Pl   shift, and go to state 47
    Mo   shift, and go to state 48
    Or   shift, and go to state 49
    Lt   shift, and go to state 50
    Eq   shift, and go to state 51
    ']'  shift, and go to state 61


State 43

   17 F: NewAr TP . '[' E ']'

    '['  shift, and go to state 62


State 44

   10 T: Not F .

    $default  reduce using rule 10 (T)


State 45

    2 E: E . Pl T
    3  | E . Mo T
    4  | E . Or T
    5  | E . Lt T
    6  | E . Eq T
   12 F: '(' E . ')'

    Pl   shift, and go to state 47
    Mo   shift, and go to state 48
    Or   shift, and go to state 49
    Lt   shift, and go to state 50
    Eq   shift, and go to state 51
    ')'  shift, and go to state 63


State 46

   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'
   21 C: . C Se Ca
   22  | . Ca
   23 Ca: . Et Af E
   24   | . V Af E
   25   | . Sk
   26   | . '{' C '}'
   27   | . If E Th C El Ca
   27   | If E Th . C El Ca
   28   | . Wh E Do Ca

    V    shift, and go to state 8
    Sk   shift, and go to state 9
    If   shift, and go to state 10
    Wh   shift, and go to state 11
    '{'  shift, and go to state 12

    Et  go to state 13
    C   go to state 64
    Ca  go to state 15


State 47

    2 E: E Pl . T
    8 T: . T Mu F
    9  | . T And F
   10  | . Not F
   11  | . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    Not    shift, and go to state 25
    '('    shift, and go to state 26

    T   go to state 65
    F   go to state 29
    Et  go to state 30


State 48

    3 E: E Mo . T
    8 T: . T Mu F
    9  | . T And F
   10  | . Not F
   11  | . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    Not    shift, and go to state 25
    '('    shift, and go to state 26

    T   go to state 66
    F   go to state 29
    Et  go to state 30


State 49

    4 E: E Or . T
    8 T: . T Mu F
    9  | . T And F
   10  | . Not F
   11  | . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    Not    shift, and go to state 25
    '('    shift, and go to state 26

    T   go to state 67
    F   go to state 29
    Et  go to state 30


State 50

    5 E: E Lt . T
    8 T: . T Mu F
    9  | . T And F
   10  | . Not F
   11  | . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    Not    shift, and go to state 25
    '('    shift, and go to state 26

    T   go to state 68
    F   go to state 29
    Et  go to state 30


State 51

    6 E: E Eq . T
    8 T: . T Mu F
    9  | . T And F
   10  | . Not F
   11  | . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    Not    shift, and go to state 25
    '('    shift, and go to state 26

    T   go to state 69
    F   go to state 29
    Et  go to state 30


State 52

    8 T: T Mu . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    '('    shift, and go to state 26

    F   go to state 70
    Et  go to state 30


State 53

    9 T: T And . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    '('    shift, and go to state 26

    F   go to state 71
    Et  go to state 30


State 54

   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'
   23 Ca: . Et Af E
   24   | . V Af E
   25   | . Sk
   26   | . '{' C '}'
   27   | . If E Th C El Ca
   28   | . Wh E Do Ca
   28   | Wh E Do . Ca

    V    shift, and go to state 8
    Sk   shift, and go to state 9
    If   shift, and go to state 10
    Wh   shift, and go to state 11
    '{'  shift, and go to state 12

    Et  go to state 13
    Ca  go to state 72


State 55

   26 Ca: '{' C '}' .

    $default  reduce using rule 26 (Ca)


State 56

    2 E: E . Pl T
    3  | E . Mo T
    4  | E . Or T
    5  | E . Lt T
    6  | E . Eq T
   23 Ca: Et Af E .  [$end, Se, El, '}']

    Pl  shift, and go to state 47
    Mo  shift, and go to state 48
    Or  shift, and go to state 49
    Lt  shift, and go to state 50
    Eq  shift, and go to state 51

    $default  reduce using rule 23 (Ca)


State 57

    2 E: E . Pl T
    3  | E . Mo T
    4  | E . Or T
    5  | E . Lt T
    6  | E . Eq T
   20 Et: Et '[' E . ']'

    Pl   shift, and go to state 47
    Mo   shift, and go to state 48
    Or   shift, and go to state 49
    Lt   shift, and go to state 50
    Eq   shift, and go to state 51
    ']'  shift, and go to state 73


State 58

   21 C: C Se Ca .

    $default  reduce using rule 21 (C)


State 59

   36 L_vartnn: L_vartnn ',' Var Argt .

    $default  reduce using rule 36 (L_vartnn)


State 60

   32 TP: T_ar TP .

    $default  reduce using rule 32 (TP)


State 61

   19 Et: V '[' E ']' .

    $default  reduce using rule 19 (Et)


State 62

    2 E: . E Pl T
    3  | . E Mo T
    4  | . E Or T
    5  | . E Lt T
    6  | . E Eq T
    7  | . T
    8 T: . T Mu F
    9  | . T And F
   10  | . Not F
   11  | . F
   12 F: . '(' E ')'
   13  | . I
   14  | . V
   15  | . true
   16  | . false
   17  | . NewAr TP '[' E ']'
   17  | NewAr TP '[' . E ']'
   18  | . Et
   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'

    I      shift, and go to state 20
    V      shift, and go to state 21
    NewAr  shift, and go to state 22
    true   shift, and go to state 23
    false  shift, and go to state 24
    Not    shift, and go to state 25
    '('    shift, and go to state 26

    E   go to state 74
    T   go to state 28
    F   go to state 29
    Et  go to state 30


State 63

   12 F: '(' E ')' .

    $default  reduce using rule 12 (F)


State 64

   21 C: C . Se Ca
   27 Ca: If E Th C . El Ca

    Se  shift, and go to state 35
    El  shift, and go to state 75


State 65

    2 E: E Pl T .  [$end, Se, Th, El, Do, Pl, Mo, Or, Lt, Eq, ')', ']', '}']
    8 T: T . Mu F
    9  | T . And F

    Mu   shift, and go to state 52
    And  shift, and go to state 53

    $default  reduce using rule 2 (E)


State 66

    3 E: E Mo T .  [$end, Se, Th, El, Do, Pl, Mo, Or, Lt, Eq, ')', ']', '}']
    8 T: T . Mu F
    9  | T . And F

    Mu   shift, and go to state 52
    And  shift, and go to state 53

    $default  reduce using rule 3 (E)


State 67

    4 E: E Or T .  [$end, Se, Th, El, Do, Pl, Mo, Or, Lt, Eq, ')', ']', '}']
    8 T: T . Mu F
    9  | T . And F

    Mu   shift, and go to state 52
    And  shift, and go to state 53

    $default  reduce using rule 4 (E)


State 68

    5 E: E Lt T .  [$end, Se, Th, El, Do, Pl, Mo, Or, Lt, Eq, ')', ']', '}']
    8 T: T . Mu F
    9  | T . And F

    Mu   shift, and go to state 52
    And  shift, and go to state 53

    $default  reduce using rule 5 (E)


State 69

    6 E: E Eq T .  [$end, Se, Th, El, Do, Pl, Mo, Or, Lt, Eq, ')', ']', '}']
    8 T: T . Mu F
    9  | T . And F

    Mu   shift, and go to state 52
    And  shift, and go to state 53

    $default  reduce using rule 6 (E)


State 70

    8 T: T Mu F .

    $default  reduce using rule 8 (T)


State 71

    9 T: T And F .

    $default  reduce using rule 9 (T)


State 72

   28 Ca: Wh E Do Ca .

    $default  reduce using rule 28 (Ca)


State 73

   20 Et: Et '[' E ']' .

    $default  reduce using rule 20 (Et)


State 74

    2 E: E . Pl T
    3  | E . Mo T
    4  | E . Or T
    5  | E . Lt T
    6  | E . Eq T
   17 F: NewAr TP '[' E . ']'

    Pl   shift, and go to state 47
    Mo   shift, and go to state 48
    Or   shift, and go to state 49
    Lt   shift, and go to state 50
    Eq   shift, and go to state 51
    ']'  shift, and go to state 76


State 75

   19 Et: . V '[' E ']'
   20   | . Et '[' E ']'
   23 Ca: . Et Af E
   24   | . V Af E
   25   | . Sk
   26   | . '{' C '}'
   27   | . If E Th C El Ca
   27   | If E Th C El . Ca
   28   | . Wh E Do Ca

    V    shift, and go to state 8
    Sk   shift, and go to state 9
    If   shift, and go to state 10
    Wh   shift, and go to state 11
    '{'  shift, and go to state 12

    Et  go to state 13
    Ca  go to state 77


State 76

   17 F: NewAr TP '[' E ']' .

    $default  reduce using rule 17 (F)


State 77

   27 Ca: If E Th C El Ca .

    $default  reduce using rule 27 (Ca)
